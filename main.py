
import discord
from discord.ext import commands
import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import aiofiles
from threading import Thread
from flask import Flask

# Keep alive para manter o bot online
app = Flask('')

@app.route('/')
def home():
    return "Security Bot Online"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

# Configura√ß√µes do sistema de seguran√ßa
WHITELIST_IDS = [
    983196900910039090,  # Seu ID (substitua pelo seu ID real)
    # Adicione mais IDs conforme necess√°rio
]

DEFAULT_CONFIG = {
    'auto_ban_bots': True,
    'role_delete_punishment': 'remove_roles',  # 'remove_roles' ou 'ban'
    'logs_channel_name': 'security-logs',
    'audit_log_delay': 2,
    'max_logs_history': 100
}

MESSAGES = {
    'channel_deleted': "üö® A√á√ÉO SUSPEITA DETECTADA - Canal Deletado",
    'role_deleted': "üö® A√á√ÉO SUSPEITA DETECTADA - Cargo Deletado",
    'bot_banned': "ü§ñ Bot Banido Automaticamente"
}

COLORS = {
    'danger': 0xff0000,
    'warning': 0xff9900,
    'success': 0x00ff00,
    'info': 0x0099ff
}

# Configura√ß√µes do bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True
intents.guild_messages = True

bot = commands.Bot(command_prefix='!sec_', intents=intents, help_command=None)

# Arquivo para salvar dados de seguran√ßa
SECURITY_DATA_FILE = "security_data.json"

class SecurityBot:
    def __init__(self):
        self.restored_roles = {}  # Para armazenar cargos removidos
        self.security_logs = []
        self.config = DEFAULT_CONFIG.copy()
    
    async def load_data(self):
        """Carrega dados de seguran√ßa salvos"""
        try:
            if os.path.exists(SECURITY_DATA_FILE):
                async with aiofiles.open(SECURITY_DATA_FILE, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    data = json.loads(content)
                    self.restored_roles = data.get('restored_roles', {})
                    self.security_logs = data.get('security_logs', [])
                    self.config.update(data.get('config', {}))
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados de seguran√ßa: {e}")
    
    async def save_data(self):
        """Salva dados de seguran√ßa"""
        try:
            data = {
                'restored_roles': self.restored_roles,
                'security_logs': self.security_logs[-100:],  # Mant√©m apenas os √∫ltimos 100 logs
                'config': self.config
            }
            async with aiofiles.open(SECURITY_DATA_FILE, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(data, indent=2, ensure_ascii=False))
        except Exception as e:
            print(f"‚ùå Erro ao salvar dados de seguran√ßa: {e}")
    
    async def get_logs_channel(self, guild):
        """Encontra ou cria o canal de logs"""
        logs_channel = discord.utils.get(guild.channels, name=self.config['logs_channel_name'])
        
        if not logs_channel:
            # Cria o canal de logs se n√£o existir
            try:
                logs_channel = await guild.create_text_channel(
                    self.config['logs_channel_name'],
                    topic="üîí Canal de logs de seguran√ßa autom√°ticos",
                    reason="Canal de seguran√ßa criado automaticamente"
                )
                print(f"‚úÖ Canal de logs criado: #{logs_channel.name}")
            except Exception as e:
                print(f"‚ùå Erro ao criar canal de logs: {e}")
                return None
        
        return logs_channel
    
    async def log_security_action(self, guild, title: str, description: str, color: int, fields: List[Dict] = None):
        """Registra a√ß√£o de seguran√ßa no canal de logs"""
        logs_channel = await self.get_logs_channel(guild)
        if not logs_channel:
            return
        
        embed = discord.Embed(
            title=f"üîí {title}",
            description=description,
            color=color,
            timestamp=datetime.utcnow()
        )
        
        if fields:
            for field in fields:
                embed.add_field(
                    name=field['name'],
                    value=field['value'],
                    inline=field.get('inline', False)
                )
        
        embed.set_footer(text="Sistema de Seguran√ßa Autom√°tico")
        
        try:
            await logs_channel.send(embed=embed)
            
            # Salva no hist√≥rico
            log_entry = {
                'timestamp': datetime.utcnow().isoformat(),
                'title': title,
                'description': description,
                'guild_id': guild.id
            }
            self.security_logs.append(log_entry)
            await self.save_data()
            
        except Exception as e:
            print(f"‚ùå Erro ao enviar log de seguran√ßa: {e}")

# Inst√¢ncia global do sistema de seguran√ßa
security_system = SecurityBot()

@bot.event
async def on_ready():
    """Evento executado quando o bot est√° pronto"""
    await security_system.load_data()
    print("üîí Sistema de Seguran√ßa est√° ONLINE!")
    print("=" * 50)
    print("‚úÖ Prote√ß√µes ativas:")
    print("  ‚Ä¢ Detec√ß√£o de exclus√£o de canais")
    print("  ‚Ä¢ Detec√ß√£o de exclus√£o de cargos")
    print("  ‚Ä¢ Banimento autom√°tico de bots")
    print("  ‚Ä¢ Sistema de logs autom√°tico")
    print("  ‚Ä¢ Recria√ß√£o autom√°tica de canais/cargos")
    print("=" * 50)

@bot.event
async def on_guild_channel_delete(channel):
    """üî• Detecta exclus√£o de canais, recria automaticamente e pune o respons√°vel"""
    try:
        guild = channel.guild
        
        # Salva informa√ß√µes do canal antes de tentar recriar
        channel_data = {
            'name': channel.name,
            'type': channel.type,
            'category': channel.category,
            'position': channel.position,
            'topic': getattr(channel, 'topic', None),
            'nsfw': getattr(channel, 'nsfw', False),
            'slowmode_delay': getattr(channel, 'slowmode_delay', 0),
            'overwrites': {str(target.id): overwrite._values for target, overwrite in channel.overwrites.items()}
        }
        
        # Aguarda um pouco para o audit log ser atualizado
        await asyncio.sleep(security_system.config['audit_log_delay'])
        
        # Busca no audit log quem deletou o canal
        async for entry in guild.audit_logs(action=discord.AuditLogAction.channel_delete, limit=1):
            if entry.target.id == channel.id:
                executor = entry.user
                
                # Verifica se o usu√°rio est√° na whitelist
                if executor.id in WHITELIST_IDS:
                    await security_system.log_security_action(
                        guild,
                        "Canal Deletado - Usu√°rio Autorizado",
                        f"üü¢ {executor.mention} deletou o canal, mas est√° na whitelist.",
                        COLORS['success'],
                        [
                            {'name': 'üì∫ Canal Deletado', 'value': f"#{channel_data['name']}", 'inline': True},
                            {'name': 'üë§ Respons√°vel', 'value': executor.mention, 'inline': True},
                            {'name': '‚úÖ Status', 'value': "Usu√°rio autorizado - sem recria√ß√£o", 'inline': True}
                        ]
                    )
                    return
                
                # Se chegou aqui, √© uma a√ß√£o suspeita - RECRIA O CANAL
                try:
                    # Cria o novo canal
                    if channel_data['type'] == discord.ChannelType.text:
                        novo_canal = await guild.create_text_channel(
                            name=channel_data['name'],
                            category=channel_data['category'],
                            topic=channel_data['topic'],
                            nsfw=channel_data['nsfw'],
                            slowmode_delay=channel_data['slowmode_delay'],
                            position=channel_data['position'],
                            reason="üîí Canal recriado automaticamente pelo sistema de seguran√ßa"
                        )
                    elif channel_data['type'] == discord.ChannelType.voice:
                        novo_canal = await guild.create_voice_channel(
                            name=channel_data['name'],
                            category=channel_data['category'],
                            position=channel_data['position'],
                            reason="üîí Canal recriado automaticamente pelo sistema de seguran√ßa"
                        )
                    else:
                        # Para outros tipos de canal, cria como texto
                        novo_canal = await guild.create_text_channel(
                            name=channel_data['name'],
                            category=channel_data['category'],
                            reason="üîí Canal recriado automaticamente pelo sistema de seguran√ßa"
                        )
                    
                    # Tenta restaurar permiss√µes
                    for target_id, overwrite_data in channel_data['overwrites'].items():
                        try:
                            target = guild.get_member(int(target_id)) or guild.get_role(int(target_id))
                            if target:
                                overwrite = discord.PermissionOverwrite(**{k: v for k, v in overwrite_data.items() if v is not None})
                                await novo_canal.set_permissions(target, overwrite=overwrite)
                        except:
                            pass  # Ignora erros de permiss√£o espec√≠ficas
                    
                    canal_recriado = True
                    canal_novo_id = novo_canal.id
                    
                except Exception as e:
                    print(f"‚ùå Erro ao recriar canal: {e}")
                    canal_recriado = False
                    canal_novo_id = None
                
                # PUNE O USU√ÅRIO mesmo com recria√ß√£o
                member = guild.get_member(executor.id)
                if member:
                    # Salva os cargos antes de remover
                    original_roles = [role for role in member.roles if role != guild.default_role]
                    role_names = [role.name for role in original_roles]
                    
                    # Salva para poss√≠vel restaura√ß√£o
                    security_system.restored_roles[str(executor.id)] = {
                        'roles': [role.id for role in original_roles],
                        'removed_at': datetime.utcnow().isoformat(),
                        'reason': f"Deletou canal #{channel_data['name']}",
                        'guild_id': guild.id
                    }
                    
                    try:
                        await member.remove_roles(*original_roles, reason="üîí Seguran√ßa: Deletou canal sem autoriza√ß√£o")
                        puni√ß√£o_aplicada = "Todos os cargos removidos"
                    except Exception as e:
                        puni√ß√£o_aplicada = f"Erro ao remover cargos: {str(e)[:100]}"
                else:
                    puni√ß√£o_aplicada = "Usu√°rio n√£o encontrado no servidor"
                    role_names = []
                
                # Log detalhado com informa√ß√µes de recria√ß√£o
                await security_system.log_security_action(
                    guild,
                    "üö® CANAL DELETADO - RECRIADO AUTOMATICAMENTE",
                    f"‚ö†Ô∏è **{executor.mention}** deletou o canal **#{channel_data['name']}** mas foi recriado automaticamente!",
                    COLORS['warning'],
                    [
                        {'name': 'üì∫ Canal Original', 'value': f"#{channel_data['name']} (ID: {channel.id})", 'inline': True},
                        {'name': 'üîÑ Canal Recriado', 'value': f"#{novo_canal.name} (ID: {canal_novo_id})" if canal_recriado else "‚ùå Falha na recria√ß√£o", 'inline': True},
                        {'name': 'üë§ Respons√°vel', 'value': f"{executor.mention}\n({executor.id})", 'inline': True},
                        {'name': '‚ö° A√ß√£o Tomada', 'value': puni√ß√£o_aplicada, 'inline': True},
                        {'name': 'üîÑ Status Recria√ß√£o', 'value': "‚úÖ Sucesso" if canal_recriado else "‚ùå Falhou", 'inline': True},
                        {'name': 'üìù Tipo do Canal', 'value': str(channel_data['type']).replace('ChannelType.', ''), 'inline': True},
                        {'name': 'üé≠ Cargos Removidos', 'value': ', '.join(role_names) if role_names else "Nenhum cargo", 'inline': False},
                        {'name': 'üîß Restaura√ß√£o Manual', 'value': "Use `!sec_restore` para reverter puni√ß√£o", 'inline': True}
                    ]
                )
                
                print(f"üîí SEGURAN√áA: Canal #{channel_data['name']} recriado automaticamente ap√≥s exclus√£o por {executor}")
                break
    
    except Exception as e:
        print(f"‚ùå Erro no detector de exclus√£o de canais: {e}")

@bot.event
async def on_guild_role_delete(role):
    """üé≠ Detecta exclus√£o de cargos, recria automaticamente e pune o respons√°vel"""
    try:
        guild = role.guild
        
        # Salva informa√ß√µes do cargo antes de tentar recriar
        role_data = {
            'name': role.name,
            'color': role.color,
            'hoist': role.hoist,
            'mentionable': role.mentionable,
            'permissions': role.permissions,
            'position': role.position,
            'reason': "üîí Cargo recriado automaticamente pelo sistema de seguran√ßa"
        }
        
        # Aguarda um pouco para o audit log ser atualizado
        await asyncio.sleep(security_system.config['audit_log_delay'])
        
        # Busca no audit log quem deletou o cargo
        async for entry in guild.audit_logs(action=discord.AuditLogAction.role_delete, limit=1):
            if entry.target.id == role.id:
                executor = entry.user
                
                # Verifica se o usu√°rio est√° na whitelist
                if executor.id in WHITELIST_IDS:
                    await security_system.log_security_action(
                        guild,
                        "Cargo Deletado - Usu√°rio Autorizado",
                        f"üü¢ {executor.mention} deletou o cargo, mas est√° na whitelist.",
                        COLORS['success'],
                        [
                            {'name': 'üé≠ Cargo Deletado', 'value': f"@{role_data['name']}", 'inline': True},
                            {'name': 'üë§ Respons√°vel', 'value': executor.mention, 'inline': True},
                            {'name': '‚úÖ Status', 'value': "Usu√°rio autorizado - sem recria√ß√£o", 'inline': True}
                        ]
                    )
                    return
                
                # Se chegou aqui, √© uma a√ß√£o suspeita - RECRIA O CARGO
                try:
                    novo_cargo = await guild.create_role(
                        name=role_data['name'],
                        color=role_data['color'],
                        hoist=role_data['hoist'],
                        mentionable=role_data['mentionable'],
                        permissions=role_data['permissions'],
                        reason=role_data['reason']
                    )
                    
                    # Tenta mover o cargo para a posi√ß√£o original
                    try:
                        await novo_cargo.edit(position=role_data['position'])
                    except:
                        pass  # Se n√£o conseguir mover, mant√©m na posi√ß√£o padr√£o
                    
                    cargo_recriado = True
                    cargo_novo_id = novo_cargo.id
                    
                except Exception as e:
                    print(f"‚ùå Erro ao recriar cargo: {e}")
                    cargo_recriado = False
                    cargo_novo_id = None
                
                # PUNE O USU√ÅRIO mesmo com recria√ß√£o
                member = guild.get_member(executor.id)
                if member:
                    # Salva os cargos antes de aplicar puni√ß√£o
                    original_roles = [r for r in member.roles if r != guild.default_role]
                    role_names = [r.name for r in original_roles]
                    
                    # Salva para poss√≠vel restaura√ß√£o
                    security_system.restored_roles[str(executor.id)] = {
                        'roles': [r.id for r in original_roles],
                        'removed_at': datetime.utcnow().isoformat(),
                        'reason': f"Deletou cargo @{role_data['name']}",
                        'guild_id': guild.id
                    }
                    
                    # Aplica puni√ß√£o baseada na configura√ß√£o
                    if security_system.config['role_delete_punishment'] == 'ban':
                        try:
                            await member.ban(reason=f"üîí Seguran√ßa: Deletou cargo @{role_data['name']} sem autoriza√ß√£o")
                            puni√ß√£o_aplicada = "**BANIDO**"
                        except Exception as e:
                            puni√ß√£o_aplicada = f"Erro ao banir: {str(e)[:100]}"
                    else:  # remove_roles (padr√£o)
                        try:
                            await member.remove_roles(*original_roles, reason=f"üîí Seguran√ßa: Deletou cargo @{role_data['name']} sem autoriza√ß√£o")
                            puni√ß√£o_aplicada = "Todos os cargos removidos"
                        except Exception as e:
                            puni√ß√£o_aplicada = f"Erro ao remover cargos: {str(e)[:100]}"
                else:
                    puni√ß√£o_aplicada = "Usu√°rio n√£o encontrado no servidor"
                    role_names = []
                
                # Log detalhado com informa√ß√µes de recria√ß√£o
                await security_system.log_security_action(
                    guild,
                    "üö® CARGO DELETADO - RECRIADO AUTOMATICAMENTE",
                    f"‚ö†Ô∏è **{executor.mention}** deletou o cargo **@{role_data['name']}** mas foi recriado automaticamente!",
                    COLORS['warning'],
                    [
                        {'name': 'üé≠ Cargo Original', 'value': f"@{role_data['name']} (ID: {role.id})", 'inline': True},
                        {'name': 'üîÑ Cargo Recriado', 'value': f"@{novo_cargo.name} (ID: {cargo_novo_id})" if cargo_recriado else "‚ùå Falha na recria√ß√£o", 'inline': True},
                        {'name': 'üë§ Respons√°vel', 'value': f"{executor.mention}\n({executor.id})", 'inline': True},
                        {'name': '‚ö° A√ß√£o Tomada', 'value': puni√ß√£o_aplicada, 'inline': True},
                        {'name': 'üîÑ Status Recria√ß√£o', 'value': "‚úÖ Sucesso" if cargo_recriado else "‚ùå Falhou", 'inline': True},
                        {'name': 'üé® Cor Original', 'value': f"{role_data['color']}", 'inline': True},
                        {'name': 'üîß Permiss√µes', 'value': f"{len([p for p, v in role_data['permissions'] if v])} permiss√µes ativas", 'inline': True},
                        {'name': 'üé≠ Cargos Removidos', 'value': ', '.join(role_names) if role_names else "Nenhum cargo", 'inline': False},
                        {'name': 'üîß Restaura√ß√£o Manual', 'value': "Use `!sec_restore` para reverter puni√ß√£o", 'inline': True}
                    ]
                )
                
                print(f"üîí SEGURAN√áA: Cargo @{role_data['name']} recriado automaticamente ap√≥s exclus√£o por {executor}")
                break
    
    except Exception as e:
        print(f"‚ùå Erro no detector de exclus√£o de cargos: {e}")

@bot.event
async def on_member_join(member):
    """ü§ñ Bane bots automaticamente ao entrarem (se configurado)"""
    if not member.bot:
        return
    
    if not security_system.config['auto_ban_bots']:
        return
    
    try:
        guild = member.guild
        
        # Bane o bot automaticamente
        await member.ban(reason="üîí Seguran√ßa: Bot banido automaticamente")
        
        await security_system.log_security_action(
            guild,
            "ü§ñ Bot Banido Automaticamente",
            f"üö´ **{member.mention}** foi banido automaticamente por ser um bot.",
            COLORS['warning'],
            [
                {'name': 'ü§ñ Bot Banido', 'value': f"{member.mention}\n({member.id})", 'inline': True},
                {'name': '‚ö° A√ß√£o', 'value': "Banimento autom√°tico", 'inline': True},
                {'name': 'üìÖ Data de Cria√ß√£o', 'value': member.created_at.strftime("%d/%m/%Y"), 'inline': True}
            ]
        )
        
        print(f"üîí SEGURAN√áA: Bot {member} banido automaticamente")
        
    except Exception as e:
        print(f"‚ùå Erro ao banir bot automaticamente: {e}")

# Comandos de administra√ß√£o
@bot.command(name='config')
@commands.has_permissions(administrator=True)
async def config_security(ctx, setting: str = None, value: str = None):
    """Configura o sistema de seguran√ßa"""
    if not setting:
        embed = discord.Embed(
            title="üîß Configura√ß√µes de Seguran√ßa",
            color=COLORS['info']
        )
        
        embed.add_field(
            name="auto_ban_bots",
            value="‚úÖ Ativo" if security_system.config['auto_ban_bots'] else "‚ùå Inativo",
            inline=True
        )
        embed.add_field(
            name="role_delete_punishment",
            value=security_system.config['role_delete_punishment'],
            inline=True
        )
        embed.add_field(
            name="logs_channel_name",
            value=security_system.config['logs_channel_name'],
            inline=True
        )
        
        embed.add_field(
            name="üí° Como usar:",
            value="`!sec_config auto_ban_bots true/false`\n`!sec_config role_delete_punishment remove_roles/ban`\n`!sec_config logs_channel_name nome_do_canal`",
            inline=False
        )
        
        await ctx.send(embed=embed)
        return
    
    if setting == 'auto_ban_bots':
        security_system.config['auto_ban_bots'] = value.lower() == 'true'
    elif setting == 'role_delete_punishment':
        if value in ['remove_roles', 'ban']:
            security_system.config['role_delete_punishment'] = value
        else:
            await ctx.send("‚ùå Valor inv√°lido. Use: `remove_roles` ou `ban`")
            return
    elif setting == 'logs_channel_name':
        security_system.config['logs_channel_name'] = value
    else:
        await ctx.send("‚ùå Configura√ß√£o inv√°lida. Use: `auto_ban_bots`, `role_delete_punishment`, ou `logs_channel_name`")
        return
    
    await security_system.save_data()
    
    embed = discord.Embed(
        title="‚úÖ Configura√ß√£o Atualizada",
        description=f"**{setting}** foi alterado para: **{value}**",
        color=COLORS['success']
    )
    await ctx.send(embed=embed)

@bot.command(name='restore')
@commands.has_permissions(administrator=True)
async def restore_roles(ctx, user_id: str):
    """Restaura os cargos de um usu√°rio removido pelo sistema"""
    if user_id not in security_system.restored_roles:
        embed = discord.Embed(
            title="‚ùå Usu√°rio N√£o Encontrado",
            description="Este usu√°rio n√£o tem cargos para restaurar.",
            color=COLORS['danger']
        )
        await ctx.send(embed=embed)
        return
    
    try:
        user_data = security_system.restored_roles[user_id]
        guild = ctx.guild
        member = guild.get_member(int(user_id))
        
        if not member:
            await ctx.send("‚ùå Usu√°rio n√£o est√° mais no servidor.")
            return
        
        # Encontra os cargos que ainda existem
        roles_to_restore = []
        for role_id in user_data['roles']:
            role = guild.get_role(role_id)
            if role:
                roles_to_restore.append(role)
        
        if roles_to_restore:
            await member.add_roles(*roles_to_restore, reason=f"üîÑ Restaura√ß√£o manual por {ctx.author}")
            
            embed = discord.Embed(
                title="‚úÖ Cargos Restaurados",
                description=f"Cargos de {member.mention} foram restaurados com sucesso!",
                color=COLORS['success']
            )
            embed.add_field(
                name="üé≠ Cargos Restaurados",
                value=', '.join([role.name for role in roles_to_restore]),
                inline=False
            )
            embed.add_field(
                name="üìÖ Removidos em",
                value=user_data['removed_at'],
                inline=True
            )
            embed.add_field(
                name="üîç Motivo Original",
                value=user_data['reason'],
                inline=True
            )
            
            # Remove da lista de restaura√ß√£o
            del security_system.restored_roles[user_id]
            await security_system.save_data()
            
            await ctx.send(embed=embed)
            
            # Log da restaura√ß√£o
            await security_system.log_security_action(
                guild,
                "üîÑ Cargos Restaurados Manualmente",
                f"Cargos de {member.mention} foram restaurados por {ctx.author.mention}",
                COLORS['success'],
                [
                    {'name': 'üë§ Usu√°rio', 'value': member.mention, 'inline': True},
                    {'name': 'üëÆ Restaurado por', 'value': ctx.author.mention, 'inline': True},
                    {'name': 'üé≠ Cargos', 'value': ', '.join([role.name for role in roles_to_restore]), 'inline': False}
                ]
            )
        else:
            await ctx.send("‚ùå Nenhum cargo v√°lido encontrado para restaurar.")
    
    except Exception as e:
        await ctx.send(f"‚ùå Erro ao restaurar cargos: {e}")

@bot.command(name='whitelist')
@commands.has_permissions(administrator=True)
async def manage_whitelist(ctx, action: str = None, user_id: str = None):
    """Gerencia a whitelist de usu√°rios autorizados"""
    if not action:
        embed = discord.Embed(
            title="üîê Whitelist de Seguran√ßa",
            description="Usu√°rios na whitelist podem deletar canais e cargos sem puni√ß√£o:",
            color=COLORS['info']
        )
        
        whitelist_users = []
        for user_id_item in WHITELIST_IDS:
            user = bot.get_user(user_id_item)
            if user:
                whitelist_users.append(f"{user.mention} ({user_id_item})")
            else:
                whitelist_users.append(f"Usu√°rio Desconhecido ({user_id_item})")
        
        embed.add_field(
            name="üë• Usu√°rios Autorizados",
            value='\n'.join(whitelist_users) if whitelist_users else "Nenhum usu√°rio na whitelist",
            inline=False
        )
        
        embed.add_field(
            name="üí° Como usar:",
            value="`!sec_whitelist add <ID>`\n`!sec_whitelist remove <ID>`\n`!sec_whitelist list`",
            inline=False
        )
        
        await ctx.send(embed=embed)
        return
    
    if action == 'add' and user_id:
        try:
            user_id_int = int(user_id)
            if user_id_int not in WHITELIST_IDS:
                WHITELIST_IDS.append(user_id_int)
                user = bot.get_user(user_id_int)
                username = user.mention if user else f"ID: {user_id_int}"
                
                embed = discord.Embed(
                    title="‚úÖ Usu√°rio Adicionado √† Whitelist",
                    description=f"{username} foi adicionado √† whitelist de seguran√ßa.",
                    color=COLORS['success']
                )
                await ctx.send(embed=embed)
            else:
                await ctx.send("‚ùå Usu√°rio j√° est√° na whitelist.")
        except ValueError:
            await ctx.send("‚ùå ID inv√°lido.")
    
    elif action == 'remove' and user_id:
        try:
            user_id_int = int(user_id)
            if user_id_int in WHITELIST_IDS:
                WHITELIST_IDS.remove(user_id_int)
                user = bot.get_user(user_id_int)
                username = user.mention if user else f"ID: {user_id_int}"
                
                embed = discord.Embed(
                    title="‚úÖ Usu√°rio Removido da Whitelist",
                    description=f"{username} foi removido da whitelist de seguran√ßa.",
                    color=COLORS['warning']
                )
                await ctx.send(embed=embed)
            else:
                await ctx.send("‚ùå Usu√°rio n√£o est√° na whitelist.")
        except ValueError:
            await ctx.send("‚ùå ID inv√°lido.")
    
    else:
        await ctx.send("‚ùå Uso: `!sec_whitelist add/remove <ID>`")

@bot.command(name='status')
async def security_status(ctx):
    """Mostra o status do sistema de seguran√ßa"""
    embed = discord.Embed(
        title="üîí Status do Sistema de Seguran√ßa",
        color=COLORS['info'],
        timestamp=datetime.utcnow()
    )
    
    # Status geral
    embed.add_field(
        name="üü¢ Sistema",
        value="Totalmente Operacional",
        inline=True
    )
    
    embed.add_field(
        name="üìä Logs Salvos",
        value=len(security_system.security_logs),
        inline=True
    )
    
    embed.add_field(
        name="üîÑ Restaura√ß√µes Pendentes",
        value=len(security_system.restored_roles),
        inline=True
    )
    
    # Configura√ß√µes ativas
    config_status = []
    config_status.append(f"ü§ñ Auto-ban bots: {'‚úÖ' if security_system.config['auto_ban_bots'] else '‚ùå'}")
    config_status.append(f"üé≠ Puni√ß√£o por cargo: {security_system.config['role_delete_punishment']}")
    config_status.append(f"üì∫ Canal de logs: #{security_system.config['logs_channel_name']}")
    
    embed.add_field(
        name="‚öôÔ∏è Configura√ß√µes Ativas",
        value='\n'.join(config_status),
        inline=False
    )
    
    # Prote√ß√µes ativas
    protections = [
        "üî• Detec√ß√£o de exclus√£o de canais",
        "üé≠ Detec√ß√£o de exclus√£o de cargos",
        "ü§ñ Banimento autom√°tico de bots",
        "üìã Sistema de logs autom√°tico",
        "üîê Whitelist de usu√°rios autorizados",
        "üîÑ Sistema de restaura√ß√£o de cargos",
        "üõ†Ô∏è Recria√ß√£o autom√°tica de canais/cargos"
    ]
    
    embed.add_field(
        name="üõ°Ô∏è Prote√ß√µes Ativas",
        value='\n'.join(protections),
        inline=False
    )
    
    embed.set_footer(text="Sistema de Seguran√ßa Autom√°tico")
    
    await ctx.send(embed=embed)

# Comando de ajuda
@bot.command(name='help')
async def security_help(ctx):
    """Central de ajuda do sistema de seguran√ßa"""
    embed = discord.Embed(
        title="üîí Sistema de Seguran√ßa - Comandos",
        description="**Prote√ß√£o autom√°tica para seu servidor Discord**",
        color=COLORS['info']
    )
    
    commands_admin = [
        "`!sec_config` - Configura o sistema de seguran√ßa",
        "`!sec_restore <ID>` - Restaura cargos de um usu√°rio",
        "`!sec_whitelist` - Gerencia usu√°rios autorizados",
        "`!sec_status` - Mostra status do sistema",
        "`!sec_help` - Esta ajuda"
    ]
    
    embed.add_field(
        name="üëë Comandos de Admin",
        value='\n'.join(commands_admin),
        inline=False
    )
    
    protections = [
        "üî• **Exclus√£o de Canais**: Recria automaticamente e pune respons√°vel",
        "üé≠ **Exclus√£o de Cargos**: Recria automaticamente e pune/bane",
        "ü§ñ **Bots Autom√°ticos**: Bane bots que entram no servidor",
        "üìã **Logs Autom√°ticos**: Registra todas as a√ß√µes no canal configurado",
        "üîê **Whitelist**: Usu√°rios autorizados n√£o sofrem puni√ß√µes",
        "üîÑ **Restaura√ß√£o**: Permite reverter puni√ß√µes aplicadas"
    ]
    
    embed.add_field(
        name="üõ°Ô∏è Prote√ß√µes Autom√°ticas",
        value='\n'.join(protections),
        inline=False
    )
    
    embed.add_field(
        name="‚ö†Ô∏è Permiss√µes Necess√°rias",
        value="‚Ä¢ View Audit Log\n‚Ä¢ Manage Roles\n‚Ä¢ Ban Members\n‚Ä¢ Manage Channels",
        inline=True
    )
    
    embed.add_field(
        name="üéØ Configura√ß√£o Inicial",
        value="1. Execute `!sec_status`\n2. Configure com `!sec_config`\n3. Adicione admins na whitelist\n4. Teste as prote√ß√µes",
        inline=True
    )
    
    embed.set_footer(text="üîí Sistema desenvolvido para m√°xima seguran√ßa")
    
    await ctx.send(embed=embed)

# Error handler
@bot.event
async def on_command_error(ctx, error):
    """Tratamento de erros dos comandos"""
    if isinstance(error, commands.MissingPermissions):
        embed = discord.Embed(
            title="üö´ Permiss√µes Insuficientes",
            description="Voc√™ precisa de permiss√µes de **Administrador** para usar este comando!",
            color=COLORS['danger']
        )
        await ctx.send(embed=embed)
    elif isinstance(error, commands.CommandNotFound):
        return  # Ignora comandos n√£o encontrados
    else:
        print(f"‚ùå Erro no comando: {error}")

# Inicializa√ß√£o do bot
if __name__ == "__main__":
    # Obt√©m o token das vari√°veis de ambiente
    TOKEN = os.getenv('DISCORD_BOT_TOKEN')
    
    if TOKEN:
        print("üöÄ Iniciando Sistema de Seguran√ßa...")
        keep_alive()
        bot.run(TOKEN)
    else:
        print("‚ùå Token do bot n√£o encontrado!")
        print("Configure a vari√°vel DISCORD_BOT_TOKEN nas Secrets do Replit")
